USE AdventureWorks2014
GO

IF OBJECT_ID( 'dbo.BlockedProcessReports' ) IS NULL
	CREATE TABLE dbo.BlockedProcessReports( 
		blocked_process_id		int IDENTITY PRIMARY KEY
	  , database_name			sysname
	  , postedDate				datetime
	  , blocked_process_report	xml ) ; 

GO


CREATE PROCEDURE
	dbo.ProcessBlockedProcessReports
WITH 
	EXECUTE AS OWNER

AS

SET NOCOUNT ON ; 


DECLARE 
	@message_body	XML
  , @message_type	INT
  , @dialog			UNIQUEIDENTIFIER
  , @subject		VARCHAR(MAX)
  , @body			VARCHAR(MAX) ;

WHILE (1 = 1)
BEGIN
	BEGIN
		BEGIN TRANSACTION

		-- Receive the next available message from the queue
		WAITFOR(
			RECEIVE TOP(1) -- just handle one message at a time
				@message_type	= message_type_id				--the type of message received
			  , @message_body	= CAST( message_body AS XML )	-- the message contents
			  , @dialog			= conversation_handle			-- the identifier of the dialog this message was received on
			FROM 
				dbo.BlockedProcessReportQueue ) , TIMEOUT 1000	-- if the queue is empty for one second, give UPDATE and go away

		-- If we didn't get anything, bail out
		IF (@@ROWCOUNT = 0)
		BEGIN
			ROLLBACK TRANSACTION ;
			BREAK ;
		END

		INSERT INTO 
			dbo.BlockedProcessReports( database_name, postedDate, blocked_process_report )
		SELECT 
			DB_NAME( CAST( @message_body AS XML ).value( '(/EVENT_INSTANCE/DatabaseID)[1]', 'int' ) )
		  , CAST( @message_body AS XML ).value( '(/EVENT_INSTANCE/PostTime)[1]', 'datetime' )
          , CAST( @message_body AS XML ).query( '(/EVENT_INSTANCE/TextData/blockedprocess-report/.)[1]' ) ;

		SELECT 
			@subject	= @@SERVERNAME + ' - Deadlock Notification'
		  , @body		= CONVERT( NVARCHAR(MAX), CAST( @message_body AS XML ).query( '(/EVENT_INSTANCE/TextData/blocked-process-report/.)[1]' ) ) + CHAR(13) + CHAR(13) + '!! Automatically generated by [Monitor].[ProcessBlockProcessReports] !!' ;

		EXECUTE 
			msdb.dbo.sp_send_dbmail 
				@recipients = 'production_dba@your_company' -- your email
			  , @subject	= @subject						-- Subject defined above
			  , @body		= @body ; -- Body defined above
	END

	-- Commit the transaction. At any point before this, we could roll
	-- back - the received message would be back on the queue AND the response
	-- wouldn't be sent.
	COMMIT TRANSACTION
END ;

GO

